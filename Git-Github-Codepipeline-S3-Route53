================================================================================================================================================================
Ec2 Instance
================================================================================================================================================================
Update Repo (sudo apt-get update)
Install git (sudo apt install git)
Install awscli (sudo apt install awscli)
Create s3 role (amazons3fullaccess) and attach it to the Ec2 instance
Clone a repo from github or vice versa
let us take index.html as an example (<html><body><h1> "namma connection" </h1></body></html>)
git add index.html
git commit -m "namma index.html"
git status
git push origin master (say if in case, the branch name s differnt, specify the same)
giv github id and token

================================================================================================================================================================
S3 Bucket
================================================================================================================================================================
Create s3 bucket as same as you're domain name
ambi.fun (domain name cum bucket name)
upload static website files to s3 bucket (you can also copy files using Ec2 instance, see below cmd)
aws s3 cp index.html s3://<bucket-name> (copyin only one file for demo purpose)
aws s3 cp index.html s3://ambi.fun
once,the files are uploaded,

click on Permissions tab
Edit Bucket policy (you can see the Edit button to your right)
Note down the Bucket ARN, it looks sumthin like dis "arn:aws:s3:::ambi.fun"
click on Policy generator (you can see the Policy generator button to your right next to Policy examples)
Policy generator opens up in a separate tab
AWS Policy Generator

Step 1: Select Policy Type
	- Select Type of Policy - select s3 Bucket Policy from the drop box

Step 2: Add Statement(s)
	- Effect - let it be default ie "Allow"
	- Principal - giv "*"
	- AWS Service would be already selected as "Amazon s3"
	- Actions - check "GetObject" from the drop box
	- Amazon Resource Name (ARN) - giv the arn number followed by /*, which was noted before ie "arn:aws:s3:::ambi.fun"
		- arn:aws:s3:::ambi.fun/*
Once, the details are filled, click on "Add Statement" button.
You added the following statements. clck the button below to Generate a policy.

Step 3: Generate Policy
click on the Generate Policy
Policy would be created which looks like below

{
  "Id": "Policy1662171684103",
  "Version": "2012-10-17",
  "Statement": [
    {
      "Sid": "Stmt1662171634521",
      "Action": [
        "s3:GetObject"
      ],
      "Effect": "Allow",
      "Resource": "arn:aws:s3:::ambi.fun/*",
      "Principal": "*"
    }
  ]
}

copy the policy and go back to the Bucket policy and paste the copied policy.
click "Save changes"
Note:- you might get an error "Unknown Error" (An unexpected error occurred.) while savin the changes, don't panic,
you wil jus hav to remove few spaces before the flower bracket "{" in 1st line of the policy.) and save the changes.

click on Properties tab
Edit Static website hosting (go below to the end to find the Static website hosting)
Static website hosting
	- select "Enable"
	- click on save changes
Hosting type
	- select "Host a static website"

Index document - Specify the home or default page of the website.
In our case its "index.html"

Error document - optional (its optional, you can giv if it s required)

click on "Save changes"
you can cum below to the end and you can find the Bucket website endpoint which looks as below
http://ambi.fun.s3-website-us-east-1.amazonaws.com

================================================================================================================================================================
CodePipeline
================================================================================================================================================================
Create Pipeline
	Step1 - Choose pipeline settings
		      - giv a name and create a new role
	Step2 - Add source stage
		    - From drop down select Source Provider as GitHub (Version 1)
		    - Click Connect to GitHub (login and connect to github) post which "Connected" 
		    - Once you connect to github, you could see your repositories, select the repo where the index.file s copied (select the respective repo)
			        eg: - Repository  - anilpu3/hello-world-war
		    - then select respective branch
			        eg:- Branch - master
		    - Change detection options
			        select Github webhooks
	Step3 - Add source stage
		    - skip build stage.
	Step4 - Add deploy stage
		    - select Deploy provider as Amazon S3 
		    - select Region 
		    - select Bucket 
		    - then check box extract file before deploy
	Step5 - Review
		    - Review the setting and click on create pipeline
==================================================================================================================================================================
Route 53
=============================================================================================
click on hosted zone
get inside you're domain name 
create a record
	- Record name (you can leave it blank or you can giv any sub domain details)
	- Record type ( select A - Routes traffic to an IPV4 address and some AWS resources)
	- check Alias
		- Route traffic to (select "Alias to s3 website endpoint)
		- choose region (choose the region, where the s3 bucket was created)
		- select the s3 endpoint from the drop box.
	Routin policy - select as "Simple routin" from the drop box.
click on create records	
===================================================================================================================================================================
